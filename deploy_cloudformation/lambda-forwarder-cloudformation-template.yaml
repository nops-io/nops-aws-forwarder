AWSTemplateFormatVersion: 2010-09-09
Description: "cloudformation template to deploy nOps lambda forwarder"

Parameters: 
  pCTForwarderReleaseVersion:
    Type: String
    Default: 1.1.0
    Description: nOps cloudtrail forwarder github release version.
  pnOpsApiKey:
    Type: String
    NoEcho: true
    Description: nOps api key.
  pnOpsKmsAPIKey:
    Type: String
    NoEcho: true
    Description: nOps API Key encrypted by KMS, requires KMS Key ID
  pCloudtrailBucketName:
    Type: String
    Description: S3 Bucket name which contains cloudtrail logs.
  pMemorySize:
    Type: Number
    Default: 1024
    MinValue: 128
    MaxValue: 3008
    Description: Memory size for the nOps Forwarder Lambda function
  pTimeout:
    Type: Number
    Default: 120
    Description: Timeout for the nOps Forwarder Lambda function

Resources:
  rNopsDistBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'nops-lambda-code-distribution-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  rNopsDistBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref rNopsDistBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action:
              - s3:*
            Effect: Deny
            Resource:
              - !Sub "${rNopsDistBucket.Arn}"
              - !Sub "${rNopsDistBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
            Principal: "*"
  
  rNopsZipCopierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ForwarderZipCopierRolePolicy0
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - "/"
                      - - Fn::GetAtt: "rNopsDistBucket.Arn"
                        - "*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::GetAtt: "rNopsDistBucket.Arn"

  rZipCopierLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies nOps Cloudtrail Forwarder zip to the destination S3 bucket
      Handler: index.handler
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import urllib.request
          import os

          def send_cfn_resp(event, context, response_status):
              resp_body = json.dumps({
                  'Status': response_status,
                  'Reason': f'See reasons in CloudWatch Logs - group: {context.log_group_name}, stream:{context.log_stream_name}',
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }).encode('utf-8')
              req = urllib.request.Request(url=event['ResponseURL'], data=resp_body, method='PUT')
              with urllib.request.urlopen(req) as f:
                  logging.info(f'Sent response to CloudFormation: {f.status}, {f.reason}')
          def delete_zips(bucket):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket)
              bucket.objects.all().delete()
          def copy_zip(source_zip_url, dest_zips_bucket):
              s3 = boto3.client('s3')
              s3_prelude = "s3://"
              filename = "nops-aws-forwarder-deployment-package-{}.zip".format(os.environ.get("CT_FORWARDER_VERSION"))
              if source_zip_url.startswith(s3_prelude):
                  parts = source_zip_url[len(s3_prelude):].split('/')
                  bucket = parts[0]
                  key = '/'.join(parts[1:])
                  response = s3.get_object(Bucket=bucket, Key=key)
                  data = response["Body"]
                  s3.upload_fileobj(data, dest_zips_bucket, filename)
              else:
                  with urllib.request.urlopen(source_zip_url) as data:
                      s3.upload_fileobj(data, dest_zips_bucket, filename)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              send_cfn_resp(event, context, 'FAILED')
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              logging.info(f'Received event: {json.dumps(event)}')
              try:
                  source_zip_url = event['ResourceProperties']['SourceZipUrl']
                  dest_zips_bucket = event['ResourceProperties']['DestZipsBucket']
                  if event['RequestType'] == 'Delete':
                      delete_zips(dest_zips_bucket)
                  else:
                      copy_zip(source_zip_url, dest_zips_bucket)
              except Exception as e:
                  logging.exception(f'Exception when copying zip from {source_zip_url} to {dest_zips_bucket}')
                  send_cfn_resp(event, context, 'FAILED')
              else:
                  send_cfn_resp(event, context, 'SUCCESS')
              finally:
                  timer.cancel()
      Environment:
        Variables:
          CT_FORWARDER_VERSION: !Ref pCTForwarderReleaseVersion
      Role: !GetAtt "rNopsZipCopierRole.Arn"

  rTriggerZipCopier:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt "rZipCopierLambdaFunction.Arn"
      DestZipsBucket: !Ref "rNopsDistBucket"
      SourceZipUrl: !Sub "https://github.com/nops-io/nops-aws-forwarder/releases/download/nops-aws-forwarder-deployment-package-${pCTForwarderReleaseVersion}.zip/nops-aws-forwarder-deployment-package-${pCTForwarderReleaseVersion}.zip"


  rnopsLambdaForwarderExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - PolicyName: "cloudwatchlogsaccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "cloudtrails3access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "s3:GetObject"
                  - "s3:GetBucketNotification"
                  - "s3:PutBucketNotification"
                Resource: 
                  - !Sub 'arn:aws:s3:::${pCloudtrailBucketName}/*'
                  - !Sub 'arn:aws:s3:::${pCloudtrailBucketName}'

  rLambdaForwarder:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub 'nops-lambda-code-distribution-${AWS::AccountId}-${AWS::Region}'
        S3Key: !Sub "nops-aws-forwarder-deployment-package-${pCTForwarderReleaseVersion}.zip"
      PackageType: Zip
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt rnopsLambdaForwarderExecutionRole.Arn
      Runtime: "python3.9"
      MemorySize:
          Ref: pMemorySize
      Timeout:
        Ref: pTimeout
      FunctionName: "nops-aws-forwarder"
      Environment:
        Variables:
          NOPS_API_KEY: !Ref pnOpsApiKey
          NOPS_LOG_LEVEL: 'INFO'
          NOPS_KMS_API_KEY: !Ref pnOpsKmsAPIKey
    DependsOn: 
      - rnopsLambdaForwarderExecutionRole
      - rTriggerZipCopier
      - rNopsDistBucket

  rLambdaForwarderInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt rLambdaForwarder.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${pCloudtrailBucketName}'

  rSetupS3TriggerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: "python3.9"
      Timeout: 60
      FunctionName: "nops-setup-s3-trigger"
      Handler: "index.lambda_handler"
      Role: !GetAtt rnopsLambdaForwarderExecutionRole.Arn
      Code:
        ZipFile: |
            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ]
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")

  rSetupS3TriggerLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt rSetupS3TriggerLambda.Arn
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"
    DependsOn: rSetupS3TriggerLambda
  
  rTriggerSetupS3Trigger:
    Type: 'Custom::LambdaTrigger'
    Properties:
      ServiceToken: !GetAtt rSetupS3TriggerLambda.Arn
      LambdaArn: !GetAtt rLambdaForwarder.Arn
      Bucket: !Ref pCloudtrailBucketName
    DependsOn: 
      - rSetupS3TriggerLambdaInvokePermission
      - rLambdaForwarder
